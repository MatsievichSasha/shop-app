[{"D:\\Programming\\cleveroad\\test-shop-03\\src\\components\\cards\\CreateCard.js":"1","D:\\Programming\\cleveroad\\test-shop-03\\src\\components\\checkForm.js":"2"},{"size":6903,"mtime":1609790022854,"results":"3","hashOfConfig":"4"},{"size":897,"mtime":1609792753439,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"6xc3n5",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Programming\\cleveroad\\test-shop-03\\src\\components\\cards\\CreateCard.js",["11","12","13","14","15"],"import React, { useRef, useState } from \"react\";\r\nimport { useCards } from \"../../contexts/CardsContext\";\r\nimport dbApp from \"firebase\";\r\nimport Alert from \"../Alert\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport { checkImage } from '../checkForm'\r\n\r\nexport default function CreateCard() {\r\n  const initialFieldValues = {\r\n    name: \"\",\r\n    urlImg: \"\",\r\n    description: \"\",\r\n    price: \"\",\r\n    discount: \"\",\r\n    discountDateEnd: \"\",\r\n  };\r\n\r\n  const [values, setValue] = useState(initialFieldValues);\r\n  const [hasImage, setHasImage] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const history = useHistory()\r\n  const { sendData } = useCards();\r\n\r\n  function handleInputChange({ target: { name, value } }) {\r\n    setValue({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  function onFileChange(e) {\r\n    setError(\"\")\r\n    setHasImage(false);\r\n    e.preventDefault();\r\n    const file = e.target.files[0];\r\n    if (checkImage(file)) {\r\n      const storageRef = dbApp.storage().ref();\r\n      const fileRef = storageRef.child(`images/${file.name}`).put(file); //create ref for file\r\n\r\n      fileRef.on(\r\n        \"state_changed\",\r\n        function (snapshot) {\r\n          let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n          console.log(\"Upload is \" + progress + \"% done\");\r\n        },\r\n        function (error) {\r\n          console.log(error);\r\n        },\r\n        function () {\r\n          fileRef.snapshot.ref.getDownloadURL().then(function (downloadURL) {\r\n            setValue({\r\n              ...values,\r\n              urlImg: downloadURL,\r\n            });\r\n            setHasImage(true);\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      e.target.value = \"\"\r\n      setError(\"Sorry, this image does not match the size or type we wanted. Choose another file.\")\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  async function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      await sendData(values);\r\n      history.push('/')\r\n    } catch {\r\n      setError('Failed to log in')\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <section className=\"panel panel-default\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">Добавление товара</h3>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            <form\r\n              onSubmit={handleFormSubmit}\r\n              className=\"form-horizontal\"\r\n              role=\"form\"\r\n            >\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"name\" className=\"col-sm-3 control-label\">\r\n                  Заголовок\r\n                </label>\r\n                <div className=\"col-sm-9\">\r\n                  <input\r\n                    onChange={handleInputChange}\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    placeholder=\"Название товара\"\r\n                    required\r\n                    minlength=\"20\" maxlength=\"60\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"control-label col-sm-3\" htmlFor=\"file_img\">\r\n                  Изображение (min 200px*200px, max 4000px*4000px, .jpg, .jpeg, .png):\r\n                </label>\r\n                <input\r\n                  onChange={onFileChange}\r\n                  type=\"file\"\r\n                  id=\"file_img\"\r\n                  name=\"file_img\"\r\n                  required\r\n                  accept=\".jpg, .jpeg, .png\"\r\n                  multiple\r\n                />\r\n              </div>\r\n              {error && <Alert value={\r\n                {\r\n                  text: error,\r\n                  type: 'danger'\r\n                }\r\n              }></Alert>}\r\n              {hasImage && (\r\n                <div>\r\n                  <img src={values.urlImg} />\r\n                </div>\r\n              )}\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"description\" className=\"col-sm-3 control-label\">\r\n                  Описание\r\n                </label>\r\n                <div className=\"col-sm-9\">\r\n                  <textarea\r\n                    onChange={handleInputChange}\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    className=\"form-control\"\r\n                    maxlength=\"200\"\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"price\" className=\"col-sm-3 control-label\">\r\n                  Цена, $\r\n                </label>\r\n                <div className=\"col-sm-3\">\r\n                  <input\r\n                    onChange={handleInputChange}\r\n                    type=\"number\"\r\n                    min=\"0\" max=\"99999999.99\"\r\n                    className=\"form-control\"\r\n                    name=\"price\"\r\n                    id=\"price\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"discount\" className=\"col-sm-3 control-label\">\r\n                  Процент скидки, %\r\n                </label>\r\n                <div className=\"col-sm-3\">\r\n                  <input\r\n                    onChange={handleInputChange}\r\n                    type=\"number\"\r\n                    min=\"0\" max=\"90\"\r\n                    className=\"form-control\"\r\n                    name=\"discount\"\r\n                    id=\"discount\"\r\n                    placeholder=\"от 10% до 90%\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label\r\n                  className=\"col-sm-3 control-label\"\r\n                  htmlFor=\"discountDateEnd\"\r\n                >\r\n                  Дата окончания скидки:\r\n                </label>\r\n                <div className=\"col-sm-3\">\r\n                  <input\r\n                    onChange={handleInputChange}\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"discountDateEnd\"\r\n                    id=\"discountDateEnd\"\r\n                    placeholder=\"dd.mm.yyyy\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <div className=\"col-sm-offset-3 col-sm-9\">\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Сохранить\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\Programming\\cleveroad\\test-shop-03\\src\\components\\checkForm.js",["16"],{"ruleId":"17","severity":1,"message":"18","line":1,"column":17,"nodeType":"19","messageId":"20","endLine":1,"endColumn":23},{"ruleId":"17","severity":1,"message":"21","line":21,"column":10,"nodeType":"19","messageId":"20","endLine":21,"endColumn":17},{"ruleId":"17","severity":1,"message":"22","line":21,"column":19,"nodeType":"19","messageId":"20","endLine":21,"endColumn":29},{"ruleId":"23","severity":1,"message":"24","line":88,"column":13,"nodeType":"25","endLine":92,"endColumn":14},{"ruleId":"26","severity":1,"message":"27","line":133,"column":19,"nodeType":"25","endLine":133,"endColumn":46},{"ruleId":"17","severity":1,"message":"28","line":1,"column":8,"nodeType":"19","messageId":"20","endLine":1,"endColumn":13},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'React' is defined but never used."]